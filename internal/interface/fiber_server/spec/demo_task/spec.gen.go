// Package demo_task_spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package demo_task_spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Defines values for GetTasksParamsFilter.
const (
	Completed    GetTasksParamsFilter = "completed"
	NotCompleted GetTasksParamsFilter = "not_completed"
)

// Defines values for GetTasksParamsSort.
const (
	CreatedDate GetTasksParamsSort = "createdDate"
	Title       GetTasksParamsSort = "title"
)

// Defines values for GetTasksParamsOrder.
const (
	Asc  GetTasksParamsOrder = "asc"
	Desc GetTasksParamsOrder = "desc"
)

// NewTask defines model for NewTask.
type NewTask struct {
	Completed   *bool   `json:"completed,omitempty"`
	Description *string `json:"description,omitempty"`
	Title       string  `json:"title"`
}

// Task defines model for Task.
type Task struct {
	Completed   bool       `json:"completed"`
	CreatedDate *time.Time `json:"createdDate,omitempty"`
	Description *string    `json:"description,omitempty"`
	Id          string     `json:"id"`
	Title       string     `json:"title"`
}

// UpdateTask defines model for UpdateTask.
type UpdateTask struct {
	Completed   *bool   `json:"completed,omitempty"`
	Description *string `json:"description,omitempty"`
	Title       *string `json:"title,omitempty"`
}

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	// Filter Filter tasks by status (e.g., completed or not completed)
	Filter *GetTasksParamsFilter `form:"filter,omitempty" json:"filter,omitempty"`

	// Sort Sort tasks by a field (e.g., title, createdDate)
	Sort *GetTasksParamsSort `form:"sort,omitempty" json:"sort,omitempty"`

	// Order Order of sorting (e.g., ascending or descending)
	Order *GetTasksParamsOrder `form:"order,omitempty" json:"order,omitempty"`
}

// GetTasksParamsFilter defines parameters for GetTasks.
type GetTasksParamsFilter string

// GetTasksParamsSort defines parameters for GetTasks.
type GetTasksParamsSort string

// GetTasksParamsOrder defines parameters for GetTasks.
type GetTasksParamsOrder string

// CreateTaskJSONRequestBody defines body for CreateTask for application/json ContentType.
type CreateTaskJSONRequestBody = NewTask

// UpdateTaskJSONRequestBody defines body for UpdateTask for application/json ContentType.
type UpdateTaskJSONRequestBody = UpdateTask

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get a list of tasks
	// (GET /tasks)
	GetTasks(c *fiber.Ctx, params GetTasksParams) error
	// Create a new task
	// (POST /tasks)
	CreateTask(c *fiber.Ctx) error
	// Update a task
	// (PATCH /tasks/{taskId})
	UpdateTask(c *fiber.Ctx, taskId string) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", query, &params.Filter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", query, &params.Order)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter order: %w", err).Error())
	}

	return siw.Handler.GetTasks(c, params)
}

// CreateTask operation middleware
func (siw *ServerInterfaceWrapper) CreateTask(c *fiber.Ctx) error {

	return siw.Handler.CreateTask(c)
}

// UpdateTask operation middleware
func (siw *ServerInterfaceWrapper) UpdateTask(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "taskId" -------------
	var taskId string

	err = runtime.BindStyledParameterWithOptions("simple", "taskId", c.Params("taskId"), &taskId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter taskId: %w", err).Error())
	}

	return siw.Handler.UpdateTask(c, taskId)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/tasks", wrapper.GetTasks)

	router.Post(options.BaseURL+"/tasks", wrapper.CreateTask)

	router.Patch(options.BaseURL+"/tasks/:taskId", wrapper.UpdateTask)

}

type GetTasksRequestObject struct {
	Params GetTasksParams
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(ctx *fiber.Ctx) error
}

type GetTasks200JSONResponse []Task

func (response GetTasks200JSONResponse) VisitGetTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type CreateTaskRequestObject struct {
	Body *CreateTaskJSONRequestBody
}

type CreateTaskResponseObject interface {
	VisitCreateTaskResponse(ctx *fiber.Ctx) error
}

type CreateTask201JSONResponse Task

func (response CreateTask201JSONResponse) VisitCreateTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type CreateTask400Response struct {
}

func (response CreateTask400Response) VisitCreateTaskResponse(ctx *fiber.Ctx) error {
	ctx.Status(400)
	return nil
}

type UpdateTaskRequestObject struct {
	TaskId string `json:"taskId"`
	Body   *UpdateTaskJSONRequestBody
}

type UpdateTaskResponseObject interface {
	VisitUpdateTaskResponse(ctx *fiber.Ctx) error
}

type UpdateTask200JSONResponse Task

func (response UpdateTask200JSONResponse) VisitUpdateTaskResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type UpdateTask400Response struct {
}

func (response UpdateTask400Response) VisitUpdateTaskResponse(ctx *fiber.Ctx) error {
	ctx.Status(400)
	return nil
}

type UpdateTask404Response struct {
}

func (response UpdateTask404Response) VisitUpdateTaskResponse(ctx *fiber.Ctx) error {
	ctx.Status(404)
	return nil
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get a list of tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	CreateTask(ctx context.Context, request CreateTaskRequestObject) (CreateTaskResponseObject, error)
	// Update a task
	// (PATCH /tasks/{taskId})
	UpdateTask(ctx context.Context, request UpdateTaskRequestObject) (UpdateTaskResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(ctx *fiber.Ctx, params GetTasksParams) error {
	var request GetTasksRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx.UserContext(), request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		if err := validResponse.VisitGetTasksResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateTask operation middleware
func (sh *strictHandler) CreateTask(ctx *fiber.Ctx) error {
	var request CreateTaskRequestObject

	var body CreateTaskJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateTask(ctx.UserContext(), request.(CreateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(CreateTaskResponseObject); ok {
		if err := validResponse.VisitCreateTaskResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// UpdateTask operation middleware
func (sh *strictHandler) UpdateTask(ctx *fiber.Ctx, taskId string) error {
	var request UpdateTaskRequestObject

	request.TaskId = taskId

	var body UpdateTaskJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.UpdateTask(ctx.UserContext(), request.(UpdateTaskRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "UpdateTask")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(UpdateTaskResponseObject); ok {
		if err := validResponse.VisitUpdateTaskResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/7xVwW7jNhD9FWLaQwuoktPkpFvaooUPbQM0PQVBMZFGNhOJZMiRU8Pwvy+GtCNbVnaz",
	"2SAnSeRw5s28x6cNVLZz1pDhAOUGQrWkDuPrX/R0jeFBXp23jjxrihtyoiWmWj547QhKuLO2JTSwzaCm",
	"UHntWFtzEBDYa7OQfdbc0sTONgNPj732kvhmF3ab7cPs3T1VLAnehKryhEz1b8ixdmN9hwwl1Mj0E+uO",
	"IDuF+qVWdP0tHeoa9rHZAfyplv91gvOj6RjBkCVtGivBR1nh8mquGutVhwYX2iwUY3gIz92VkTJ1eTWH",
	"DFbkQzp1ls/ymUCwjgw6DSWc57P8HDJwyMvYXJEylRtYEMtDOkcpO6+hhD+Ir3elHHrsiMkHKG/GAH/X",
	"LZNPsNTdWgVG7oP6gfJFnqnnCSrrlbE8LPwI0jKU8NiTX0MGBjvpp4n5INvdFwFGpu+E1YGODIzl/6aI",
	"HWY8BvqP9TzARNVoaus9zjjNTB1I+SV8wXqeRPcst4Pr8Bpcf/uavLKNkszC8A4ShopMLQvWKzmSvl7C",
	"ZSXNJDAMFSSxTuG5lZsTnDUhaf7n2SxJ3zCZqAt0rtVVVEZxH5LWhyqaqYsHv/fUQAnfFYPtFTvPK+L1",
	"GmSP3uM6qX6kdtXqwDKMJE6JCH3XoV8nSSocR2TgbJjQ76+Rhlg4eQMF/sXW669q7nM97U18e2w+7Hva",
	"nsz07N3KDjWPRxd9YKc9FfqqohCavm3XMqKLROrxiblZYatrpY3reTTqND2FytBTnHTcT5ZRbOQxr7fR",
	"MJGr5en0D1z1xD+iesWGBvGmhDCe46GaJ3X7/qweAH8VsbOPIbaPsN5GrERdnEbFvGLJje1NPeI/jUHh",
	"nnvZJL+a/gX8idrIL0ilEMig9y2UsGR2oSwKdDqn/1HMOq9sV6zOYHu7/RQAAP//TudFmyAJAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
