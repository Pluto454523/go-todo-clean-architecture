// Package task_spec provides primitives to interact with the openapi HTTP API.
//
// Code generated by unknown module path version unknown version DO NOT EDIT.
package task_spec

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

// Error defines model for Error.
type Error struct {
	Code    *int    `json:"code,omitempty"`
	Message *string `json:"message,omitempty"`
}

// TaskPayload defines model for TaskPayload.
type TaskPayload struct {
	Description *string    `json:"description,omitempty"`
	DueDate     *time.Time `json:"dueDate,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Title       *string    `json:"title,omitempty"`
}

// TaskResponse defines model for TaskResponse.
type TaskResponse struct {
	Description *string    `json:"description,omitempty"`
	DueDate     *time.Time `json:"dueDate,omitempty"`
	Id          *int       `json:"id,omitempty"`
	Status      *string    `json:"status,omitempty"`
	Title       *string    `json:"title,omitempty"`
}

// GetTasksParams defines parameters for GetTasks.
type GetTasksParams struct {
	Order  *string `form:"order,omitempty" json:"order,omitempty"`
	Sort   *string `form:"sort,omitempty" json:"sort,omitempty"`
	Filter *string `form:"filter,omitempty" json:"filter,omitempty"`
	Value  *string `form:"value,omitempty" json:"value,omitempty"`
}

// PostTasksJSONRequestBody defines body for PostTasks for application/json ContentType.
type PostTasksJSONRequestBody = TaskPayload

// PatchTasksIdJSONRequestBody defines body for PatchTasksId for application/json ContentType.
type PatchTasksIdJSONRequestBody = TaskPayload

// PutTasksIdJSONRequestBody defines body for PutTasksId for application/json ContentType.
type PutTasksIdJSONRequestBody = TaskPayload

// PatchTasksIdStatusJSONRequestBody defines body for PatchTasksIdStatus for application/json ContentType.
type PatchTasksIdStatusJSONRequestBody = TaskPayload

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(c *fiber.Ctx, params GetTasksParams) error
	// Create a new task
	// (POST /tasks)
	PostTasks(c *fiber.Ctx) error
	// Delete task by ID
	// (DELETE /tasks/{id})
	DeleteTasksId(c *fiber.Ctx, id int) error
	// Get task by ID
	// (GET /tasks/{id})
	GetTasksId(c *fiber.Ctx, id int) error
	// Patch task by ID
	// (PATCH /tasks/{id})
	PatchTasksId(c *fiber.Ctx, id int) error
	// Update task by ID
	// (PUT /tasks/{id})
	PutTasksId(c *fiber.Ctx, id int) error
	// Change status of task by ID
	// (PATCH /tasks/{id}/status)
	PatchTasksIdStatus(c *fiber.Ctx, id int) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// GetTasks operation middleware
func (siw *ServerInterfaceWrapper) GetTasks(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetTasksParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", true, false, "order", query, &params.Order)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter order: %w", err).Error())
	}

	// ------------- Optional query parameter "sort" -------------

	err = runtime.BindQueryParameter("form", true, false, "sort", query, &params.Sort)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter sort: %w", err).Error())
	}

	// ------------- Optional query parameter "filter" -------------

	err = runtime.BindQueryParameter("form", true, false, "filter", query, &params.Filter)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter filter: %w", err).Error())
	}

	// ------------- Optional query parameter "value" -------------

	err = runtime.BindQueryParameter("form", true, false, "value", query, &params.Value)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter value: %w", err).Error())
	}

	return siw.Handler.GetTasks(c, params)
}

// PostTasks operation middleware
func (siw *ServerInterfaceWrapper) PostTasks(c *fiber.Ctx) error {

	return siw.Handler.PostTasks(c)
}

// DeleteTasksId operation middleware
func (siw *ServerInterfaceWrapper) DeleteTasksId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeleteTasksId(c, id)
}

// GetTasksId operation middleware
func (siw *ServerInterfaceWrapper) GetTasksId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetTasksId(c, id)
}

// PatchTasksId operation middleware
func (siw *ServerInterfaceWrapper) PatchTasksId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.PatchTasksId(c, id)
}

// PutTasksId operation middleware
func (siw *ServerInterfaceWrapper) PutTasksId(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.PutTasksId(c, id)
}

// PatchTasksIdStatus operation middleware
func (siw *ServerInterfaceWrapper) PatchTasksIdStatus(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.PatchTasksIdStatus(c, id)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(m)
	}

	router.Get(options.BaseURL+"/tasks", wrapper.GetTasks)

	router.Post(options.BaseURL+"/tasks", wrapper.PostTasks)

	router.Delete(options.BaseURL+"/tasks/:id", wrapper.DeleteTasksId)

	router.Get(options.BaseURL+"/tasks/:id", wrapper.GetTasksId)

	router.Patch(options.BaseURL+"/tasks/:id", wrapper.PatchTasksId)

	router.Put(options.BaseURL+"/tasks/:id", wrapper.PutTasksId)

	router.Patch(options.BaseURL+"/tasks/:id/status", wrapper.PatchTasksIdStatus)

}

type GetTasksRequestObject struct {
	Params GetTasksParams
}

type GetTasksResponseObject interface {
	VisitGetTasksResponse(ctx *fiber.Ctx) error
}

type GetTasks202JSONResponse []TaskResponse

func (response GetTasks202JSONResponse) VisitGetTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(202)

	return ctx.JSON(&response)
}

type GetTasks400JSONResponse Error

func (response GetTasks400JSONResponse) VisitGetTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PostTasksRequestObject struct {
	Body *PostTasksJSONRequestBody
}

type PostTasksResponseObject interface {
	VisitPostTasksResponse(ctx *fiber.Ctx) error
}

type PostTasks201JSONResponse TaskResponse

func (response PostTasks201JSONResponse) VisitPostTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(201)

	return ctx.JSON(&response)
}

type PostTasks400JSONResponse Error

func (response PostTasks400JSONResponse) VisitPostTasksResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type DeleteTasksIdRequestObject struct {
	Id int `json:"id"`
}

type DeleteTasksIdResponseObject interface {
	VisitDeleteTasksIdResponse(ctx *fiber.Ctx) error
}

type DeleteTasksId204Response struct {
}

func (response DeleteTasksId204Response) VisitDeleteTasksIdResponse(ctx *fiber.Ctx) error {
	ctx.Status(204)
	return nil
}

type DeleteTasksId400JSONResponse Error

func (response DeleteTasksId400JSONResponse) VisitDeleteTasksIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetTasksIdRequestObject struct {
	Id int `json:"id"`
}

type GetTasksIdResponseObject interface {
	VisitGetTasksIdResponse(ctx *fiber.Ctx) error
}

type GetTasksId202JSONResponse TaskResponse

func (response GetTasksId202JSONResponse) VisitGetTasksIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(202)

	return ctx.JSON(&response)
}

type GetTasksId400JSONResponse Error

func (response GetTasksId400JSONResponse) VisitGetTasksIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PatchTasksIdRequestObject struct {
	Id   int `json:"id"`
	Body *PatchTasksIdJSONRequestBody
}

type PatchTasksIdResponseObject interface {
	VisitPatchTasksIdResponse(ctx *fiber.Ctx) error
}

type PatchTasksId202JSONResponse TaskResponse

func (response PatchTasksId202JSONResponse) VisitPatchTasksIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(202)

	return ctx.JSON(&response)
}

type PatchTasksId400JSONResponse Error

func (response PatchTasksId400JSONResponse) VisitPatchTasksIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PutTasksIdRequestObject struct {
	Id   int `json:"id"`
	Body *PutTasksIdJSONRequestBody
}

type PutTasksIdResponseObject interface {
	VisitPutTasksIdResponse(ctx *fiber.Ctx) error
}

type PutTasksId202JSONResponse TaskResponse

func (response PutTasksId202JSONResponse) VisitPutTasksIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(202)

	return ctx.JSON(&response)
}

type PutTasksId400JSONResponse Error

func (response PutTasksId400JSONResponse) VisitPutTasksIdResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type PatchTasksIdStatusRequestObject struct {
	Id   int `json:"id"`
	Body *PatchTasksIdStatusJSONRequestBody
}

type PatchTasksIdStatusResponseObject interface {
	VisitPatchTasksIdStatusResponse(ctx *fiber.Ctx) error
}

type PatchTasksIdStatus202JSONResponse TaskResponse

func (response PatchTasksIdStatus202JSONResponse) VisitPatchTasksIdStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(202)

	return ctx.JSON(&response)
}

type PatchTasksIdStatus400JSONResponse Error

func (response PatchTasksIdStatus400JSONResponse) VisitPatchTasksIdStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get all tasks
	// (GET /tasks)
	GetTasks(ctx context.Context, request GetTasksRequestObject) (GetTasksResponseObject, error)
	// Create a new task
	// (POST /tasks)
	PostTasks(ctx context.Context, request PostTasksRequestObject) (PostTasksResponseObject, error)
	// Delete task by ID
	// (DELETE /tasks/{id})
	DeleteTasksId(ctx context.Context, request DeleteTasksIdRequestObject) (DeleteTasksIdResponseObject, error)
	// Get task by ID
	// (GET /tasks/{id})
	GetTasksId(ctx context.Context, request GetTasksIdRequestObject) (GetTasksIdResponseObject, error)
	// Patch task by ID
	// (PATCH /tasks/{id})
	PatchTasksId(ctx context.Context, request PatchTasksIdRequestObject) (PatchTasksIdResponseObject, error)
	// Update task by ID
	// (PUT /tasks/{id})
	PutTasksId(ctx context.Context, request PutTasksIdRequestObject) (PutTasksIdResponseObject, error)
	// Change status of task by ID
	// (PATCH /tasks/{id}/status)
	PatchTasksIdStatus(ctx context.Context, request PatchTasksIdStatusRequestObject) (PatchTasksIdStatusResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// GetTasks operation middleware
func (sh *strictHandler) GetTasks(ctx *fiber.Ctx, params GetTasksParams) error {
	var request GetTasksRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasks(ctx.UserContext(), request.(GetTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTasksResponseObject); ok {
		if err := validResponse.VisitGetTasksResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PostTasks operation middleware
func (sh *strictHandler) PostTasks(ctx *fiber.Ctx) error {
	var request PostTasksRequestObject

	var body PostTasksJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PostTasks(ctx.UserContext(), request.(PostTasksRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PostTasks")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PostTasksResponseObject); ok {
		if err := validResponse.VisitPostTasksResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteTasksId operation middleware
func (sh *strictHandler) DeleteTasksId(ctx *fiber.Ctx, id int) error {
	var request DeleteTasksIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteTasksId(ctx.UserContext(), request.(DeleteTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(DeleteTasksIdResponseObject); ok {
		if err := validResponse.VisitDeleteTasksIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetTasksId operation middleware
func (sh *strictHandler) GetTasksId(ctx *fiber.Ctx, id int) error {
	var request GetTasksIdRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetTasksId(ctx.UserContext(), request.(GetTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(GetTasksIdResponseObject); ok {
		if err := validResponse.VisitGetTasksIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTasksId operation middleware
func (sh *strictHandler) PatchTasksId(ctx *fiber.Ctx, id int) error {
	var request PatchTasksIdRequestObject

	request.Id = id

	var body PatchTasksIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTasksId(ctx.UserContext(), request.(PatchTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PatchTasksIdResponseObject); ok {
		if err := validResponse.VisitPatchTasksIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PutTasksId operation middleware
func (sh *strictHandler) PutTasksId(ctx *fiber.Ctx, id int) error {
	var request PutTasksIdRequestObject

	request.Id = id

	var body PutTasksIdJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PutTasksId(ctx.UserContext(), request.(PutTasksIdRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PutTasksId")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PutTasksIdResponseObject); ok {
		if err := validResponse.VisitPutTasksIdResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// PatchTasksIdStatus operation middleware
func (sh *strictHandler) PatchTasksIdStatus(ctx *fiber.Ctx, id int) error {
	var request PatchTasksIdStatusRequestObject

	request.Id = id

	var body PatchTasksIdStatusJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.PatchTasksIdStatus(ctx.UserContext(), request.(PatchTasksIdStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "PatchTasksIdStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	} else if validResponse, ok := response.(PatchTasksIdStatusResponseObject); ok {
		if err := validResponse.VisitPatchTasksIdStatusResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWTW/bOhD8K8K+d9SzlI+TbslLURjowWjTU5HDRlzbTCSSWa5SGIb+e0HSseNYDZrA",
	"NXzISQIl7o5mZkdcQm1bZw0Z8VAtwddzajHefmK2HG4cW0csmuJybRWFqywcQQXaCM2Ioc+hJe9x9vyh",
	"F9ZmBn2fP63Y2zuqJbx9jf5+govGotptosjXrJ1oawbK5aA6ukKJraaWWxSoQKHQf6Jbgnx3gxeUzg/W",
	"Ei3NW0B/Je+s8XQA1FoNM72XrwlL2kztDnK4mIyzqeWsRYMzbWaZoL/3sC4eacguJmPI4ZHYp10no3JU",
	"BgjWkUGnoYKzUTk6gxwcyjzCLVKlagkzknAJ9GFoO1ZQwWeS61Urh4wtCbGH6scSdOjw0BEvIAeDbfwQ",
	"VsSQrzw7+M3DG71lec++qW7kfR0fseno1Y03OfDKWJGf0/I0TZsRMpEqdK7RdSSruPPJYpt6WqiNG/9l",
	"mkIF/xSbwS5WU11s2XfjCGTGRTLEthG+aC+Zna7073M4L8s3oXoNTMqXga6XqDKmh468RN/6rm2RF8kf",
	"GTbNBo+zfsBGE+vXPloVurRqsTfkz6Mr4g9NNJOCSrijfkfKk7223ii4y12czJoJhdQRCPZ/RJJhZuhn",
	"VC0+TylQLLXqU/g0lFJxW8aruB6FHKvfREJIls2YaQUvxRiYuXWQDgzd+W4aRkoTxmOgNLESycxuF9n4",
	"KmB6NU0PRt7pYW2uSFA3x5JL24I4lHo+kExh+a+LcgSJd2ArRLqPYjyjwi/N0A39pDr5MMLejdA5dSS/",
	"vu8RyZYTtn99xeYU/wdp8S29/GGVvVkl0Z/VczSz4zgsRSRPuFbH7rV3wqvEj0+6d9xABXMRVxVFY2ts",
	"5tZLdVaWJfQ3/a8AAAD//5fEc8vYDwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
